# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: kubernetes-dashboard

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard

---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  type: NodePort
  ports:
    - port: 443
      targetPort: 8443
      nodePort: 30843
  selector:
    k8s-app: kubernetes-dashboard

---
apiVersion: v1
data:
  dashboard.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN1akNDQWFJQ0NRRE1CMHpiZHhod0R6QU5CZ2txaGtpRzl3MEJBUXNGQURBZk1SMHdHd1lEVlFRRERCUnIKZFdKbGNtNWxkR1Z6TFdSaGMyaGliMkZ5WkRBZUZ3MHlNREF4TVRreE5EQXdNVFJhRncweU1UQXhNVGd4TkRBdwpNVFJhTUI4eEhUQWJCZ05WQkFNTUZHdDFZbVZ5Ym1WMFpYTXRaR0Z6YUdKdllYSmtNSUlCSWpBTkJna3Foa2lHCjl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEyOFU2eFphWEwwZTg2cmplcGFaUHM5ZXFQaUU5aVpjQ3dLdm8KZk8yR2h6NjZBd3orblFod1MxWGU5TG5XV2owT2htUzhxTG0wUUhCTm5mM0RFQUVDTGR6L3gvUGloQzRaMFFrNQpLK1QzQ2Z0Zkl5aG5qZk5QZnQ1M3ZtQ1l1UG1haERETE8rck9qY1ZUdU5udHMydUM0dG5ENHNycXc3L2xJaUh4CnduV3JlaUtxVk8vWCs3dmZsR0U4cE5LOVk3STBmbTRQUlUvZ2drbTVDelZSS3RwSEdtTXhnSldENkJQWElzclkKU1lNVHJJSlFsWENqK0t3Q1VieEJrR0VHSFhJbTMwb3kvMlAvUEMrTnhGQWZOQ2p5M0tGK2lkd0swcFdvSmxtTwp5bDJlaGhCVktSL1R0dyt5SWtNZm4yRkhhTllpdHRVbEcvM3FOSlk4QWdFM3RwbEhXUUlEQVFBQk1BMEdDU3FHClNJYjNEUUVCQ3dVQUE0SUJBUUF4MEtUdnY3bkVzdU4zN25HbVJ5NFVKMGR1bEpWQUNEYzJuOG5zZE1HczhCOVYKN2IwOUF1WGRYSFYyU0ZwSmU4Y2UvUmZCeUFMMWhHTEJlMGw0UHA3bGRkeTJyNlM0d1lVMWpoczEyTGtvMndOcgoxbVRBVVdZL2ptV2Rzd0tnSGJNa0ZXMFQ0a284NEUxVE1CT2xnN2Z1bnBORTZaNGptY2JqOXkyenY4Q21VR0w3CkZCUHdWdlVBTi91NWVzYmV2RjdqN3lxNmY3b09uRWl3QmZjamp4c3hrUStEdjI5VlZUN3hZRm1CWFJyb2FwSXEKZFJaV2s2S1Yxd1FzMGloRGZRUmlNc3ExS3BjN1VmdUI4UjRENzNTYlN5eXY3Zmp6OFN0c3IzZlJLYnNtVDRSZgpNUG5FeGl2aGJlTGE3V0ZFMUp5dVFqcVJvQ3VieC9NK2grMjcyUmdQCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  dashboard.csr: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1pEQ0NBVXdDQVFBd0h6RWRNQnNHQTFVRUF3d1VhM1ZpWlhKdVpYUmxjeTFrWVhOb1ltOWhjbVF3Z2dFaQpNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURieFRyRmxwY3ZSN3pxdU42bHBrK3oxNm8rCklUMkpsd0xBcStoODdZYUhQcm9ERFA2ZENIQkxWZDcwdWRaYVBRNkdaTHlvdWJSQWNFMmQvY01RQVFJdDNQL0gKOCtLRUxoblJDVGtyNVBjSisxOGpLR2VOODA5KzNuZStZSmk0K1pxRU1Nczc2czZOeFZPNDJlMnphNExpMmNQaQp5dXJEditVaUlmSENkYXQ2SXFwVTc5Zjd1OStVWVR5azByMWpzalIrYmc5RlQrQ0NTYmtMTlZFcTJrY2FZekdBCmxZUG9FOWNpeXRoSmd4T3NnbENWY0tQNHJBSlJ2RUdRWVFZZGNpYmZTakwvWS84OEw0M0VVQjgwS1BMY29YNkoKM0FyU2xhZ21XWTdLWFo2R0VGVXBIOU8zRDdJaVF4K2ZZVWRvMWlLMjFTVWIvZW8wbGp3Q0FUZTJtVWRaQWdNQgpBQUdnQURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWpBbTFTRStJanJJdzdDNU9qT0hmZkJMMW8zN3Znb1hNClRVUGN3ZUg3cG14V3VhdHNaZkc2akxZS0ZINDlrazVaTjR4a3FjSWFuM29BMkFYWWpTRkhzTStNeS9YaFU0UXYKbnY3RFhuTHlWUW9XcXA3dk8yVlpHSzVkTVRBQTE0MFRoUkNoanFoNmVKelNqbHI4c0lKZ2pEMzBsTVhWMFBaSApLNUJsbDA3ZGFpcmtPN0EzRWxvUGtpaGVOa0wyMm9jZ2VuNjl0eExaWW43MVJQY1RBTThzOTdSVmNYS2EvWURyCkNDVkJLcGpBZElpVnc1K2l2TXBsN1ZFTjZnTGtBaW9HQTlBRmtxWFNFSEhJelVCQmwzT0F5Wm1XcFVNeGJvSzcKTlA3UWM2d0p6ck45ZXlQbEU5a3p0UlpjZndQWHNGcHZ5ak9HcDV3ckN0SSt6OWFtVU1rWm9nPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUgUkVRVUVTVC0tLS0tCg==
  dashboard.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRRGJ4VHJGbHBjdlI3enEKdU42bHBrK3oxNm8rSVQySmx3TEFxK2g4N1lhSFByb0REUDZkQ0hCTFZkNzB1ZFphUFE2R1pMeW91YlJBY0UyZAovY01RQVFJdDNQL0g4K0tFTGhuUkNUa3I1UGNKKzE4aktHZU44MDkrM25lK1lKaTQrWnFFTU1zNzZzNk54Vk80CjJlMnphNExpMmNQaXl1ckR2K1VpSWZIQ2RhdDZJcXBVNzlmN3U5K1VZVHlrMHIxanNqUitiZzlGVCtDQ1Nia0wKTlZFcTJrY2FZekdBbFlQb0U5Y2l5dGhKZ3hPc2dsQ1ZjS1A0ckFKUnZFR1FZUVlkY2liZlNqTC9ZLzg4TDQzRQpVQjgwS1BMY29YNkozQXJTbGFnbVdZN0tYWjZHRUZVcEg5TzNEN0lpUXgrZllVZG8xaUsyMVNVYi9lbzBsandDCkFUZTJtVWRaQWdNQkFBRUNnZ0VCQUlUcFJBRUpjUWVjR0NuUWduNm1GVi9MbDE4WjFWQ243bmM5d0U0RmpLMncKaHVpZmJFRG1RSnVmSkViWE9VYTcxRlA5Q29mMFA0b1ZJU3ZpczV5ekwzRXpUZEhNc25xRU13TFQxQ3F5djZEZQowSXUvdk5rQmhGdFRDaEl0ODA4elRYcVMwK2E1dkEvTGZqVzJQdWFhcDc2d09xS25XOUhrOVJ0dWNmck1GVmU0CkRad1RaYVVZVkVTLzY1dVRUeUdRbWQ1V0FRbnZJTmtGbzV2cSt6S2FKTHlLOWUzb2JIWHpTZVhZeE9NY2ZFK2UKdVBmVHY2VE5RSHVjQW54NHV6R2E2Ym4vb2JYdHN5ZHQxc2ZaNFliNzJyMVZQYWlCNnB6VEI0RHZhbmhaRkFVVgpKY0xoKzE3cENicXRvVm03dk9LQVMwWjlneHhaWnUwOEJUZUZTa1k3aVMwQ2dZRUEvNmlBV1g2bmhYUE5XV3A0CnNXTGczdXBRQ2doSVBKWmhEeFQydVJVY21xRlVPNXR6c3hrUkM3WW1yeEV1aTdMWEs1ZktCSG5zK2lkcDl5Z2IKZ1VYTmcyNWp4dGZaU3duNnMrNklkSU83Z0ZvdnE2N1FVc3FTdEJxZEloaW5yQ2Z3MERhQU95bW9lWnNGeDhKOQpmeWErVGNVL29yMHVVY2liK0FTU2Zud2pNc3NDZ1lFQTNCQnlGNmNWQnlSdXRTamE0cDE1ZWg0QTVRcCtlU2ZxCmFxckxPVW92YnN4cllPQVNqUUc2WmJvL1h2cUNZV09PWDJIdGZuRHdEQVFIbVZBanVsaVZDMTlTc0djR0tOU3UKV3VmeDFhL3IyQk04R1NnR3NXdEVzbHZTS0FMb3NUY2ZlMGowaXM3MWN1Nk1TbVpyVzVxNHN4WmJLeEoreVMwYgpUTlhSQ3ZaOUZlc0NnWUVBa2dweVR5MC9pc2RNN2FBWms5TVUrNkhEMlFkRUpJQU9yNnZkQ0hzYjNPVDlsaE5GCjgzQUZRYmhxdnFURS92NUpWZGllaVJJUkloRHp3a0VCL1VXZmtVMjA1M2lUNHY2dlhLdU0vV25tNlBvYnN5bm8KVFBMMC9MY2JQY2Z4dURFVXFnd0lFa1BJdnJha2hhai9RV3dqVjQrdXUwcndNNzJ5QXVxeHVGazNUaU1DZ1lCSwp3WTl3ZDRMT0xWTXFXVm1aOS9MSFNCLzNyb3Z1TG1BVW9qWnRITVZtTnkwVytLZDBuU3lyMkF3bEFLWi8zT2tGCmYrZkV0eXJrZWczMngrR0xNUUpZbmFZaVpLMFQrOFBLLzlZSVNEMnU1a0haTGQ2d01JZGlxNHlGcVE5US9DL0cKbXE3djVJUSs2Y2hna2RCUWl3dkpVb1BmNnVXRkE3eXRha2tjRjBYQXh3S0JnQ0JRRjZBZ2czcjV5NlRJZ0N5Kwp0dWtSZkVYZkZwOERMMHlWaW1mTmlPQytZZU5mcklYNnBKM3p4OG84OVQxZ2lNS1VUZlM1a3orSFdSaG9HTVJ6Cm5VaDhUMWNXcXhWVUVNWG9DS2s4WjI0VUFYTHU2TUJhSzl5NXNIdmJnazFSVlVDUzk0V3ZJQm40WXh2VmlZZTEKeVNZZG1VRzdHN0ZpTXhLdmJGNVFhendWCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: kubernetes-dashboard-certs
  namespace: kubernetes-dashboard
  labels:
    k8s-app: kubernetes-dashboard
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-csrf
  namespace: kubernetes-dashboard
type: Opaque
data:
  csrf: ""

---
apiVersion: v1
kind: Secret
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-key-holder
  namespace: kubernetes-dashboard
type: Opaque

---
kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard-settings
  namespace: kubernetes-dashboard

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames:
      [
        "kubernetes-dashboard-key-holder",
        "kubernetes-dashboard-certs",
        "kubernetes-dashboard-csrf",
      ]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["kubernetes-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames:
      [
        "heapster",
        "http:heapster:",
        "https:heapster:",
        "dashboard-metrics-scraper",
        "http:dashboard-metrics-scraper",
      ]
    verbs: ["get"]

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard

---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
        - name: kubernetes-dashboard
          image: kubernetesui/dashboard:v2.0.0-rc2
          imagePullPolicy: Always
          ports:
            - containerPort: 8443
              protocol: TCP
          args:
            - --auto-generate-certificates
            - --namespace=kubernetes-dashboard
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          volumeMounts:
            - name: kubernetes-dashboard-certs
              mountPath: /certs
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: kubernetes-dashboard-certs
          secret:
            secretName: kubernetes-dashboard-certs
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      nodeSelector:
        "beta.kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: kubernetes-dashboard
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    k8s-app: dashboard-metrics-scraper

---
kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    k8s-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: kubernetes-dashboard
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        k8s-app: dashboard-metrics-scraper
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
    spec:
      containers:
        - name: dashboard-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.2
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: kubernetes-dashboard
      nodeSelector:
        "beta.kubernetes.io/os": linux
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: Exists
